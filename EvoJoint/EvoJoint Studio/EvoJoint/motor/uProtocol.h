#ifndef UPROTOCOL_H
#define UPROTOCOL_H

#include <QObject>
#include <QDebug>
#include <QSerialPort>
#include <QtSerialPort/QSerialPort>
#include <QCoreApplication>
#include <QElapsedTimer>
#include <QTimer>
#include <QThread>
#include <QMap>
#include <QProcess>
#include <QDataStream>
#include <QVector>

#define BYTE0(dwTemp)       (*(char *)(&dwTemp))
#define BYTE1(dwTemp)       (*((char *)(&dwTemp) + 1))
#define BYTE2(dwTemp)       (*((char *)(&dwTemp) + 2))
#define BYTE3(dwTemp)       (*((char *)(&dwTemp) + 3))

const QMap<QString, uint8_t> cmd = {
    std::map<QString, uint8_t>::value_type("read", 0x20),
    std::map<QString, uint8_t>::value_type("write", 0x21),
    std::map<QString, uint8_t>::value_type("answer", 0x22),
    std::map<QString, uint8_t>::value_type("autoReport", 0x23),
    std::map<QString, uint8_t>::value_type("error", 0x24),
};

//应用报文结构
enum{
    CM_H1,
    CM_H2,
    CM_LEN,
    CM_CMD,
    CM_FUN,
    CM_DATA
};

static const unsigned char crc8_table[256] = {
    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83,
    0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e,
    0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0,
    0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d,
    0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5,
    0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58,
    0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6,
    0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b,
    0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f,
    0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92,
    0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c,
    0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1,
    0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49,
    0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4,
    0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a,
    0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7,
    0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
};


class uProtocol : public QObject
{
    Q_OBJECT
public:
    explicit uProtocol(QObject *parent = nullptr);
    virtual ~uProtocol();
    typedef union{
        uint32_t data;
        uint16_t da[2];
        uint16_t d[4];
    }u32DataType;

    virtual bool open(QString name, qint32 bsp);
    virtual void close();
    virtual void showFunCode();

    void registerFun(uint8_t code);
    bool packageToBus(uint8_t cmd, uint8_t fun, QByteArray qb, int timoutVal, bool isBlock);
    bool packageToBus(uint8_t cmd, uint8_t fun, QByteArray qb, int timoutVal, int cnt, bool isBlock);

    bool packageToBus(uint8_t cmd, uint8_t fun, uint32_t val, int timoutVal, bool isBlock);             //为了向下兼容之前的 代码
    bool packageToBus(uint8_t cmd, uint8_t fun, uint32_t val, int timoutVal, int cnt, bool isBlock);

    QByteArray getResultData(uint8_t fun);
    uint32_t  getResultU32Data(uint8_t fun);

    //不同数据类型转换
    template <typename T>
    static T byteArrayToValue(const QByteArray &byteArray, QDataStream::ByteOrder byteOrder = QDataStream::LittleEndian) {
        T value;
        QDataStream stream(byteArray);
        stream.setByteOrder(byteOrder);
        stream.setFloatingPointPrecision(QDataStream::SinglePrecision); // 设置为单精度浮点数
        stream >> value;
        return value;
    }

    //拆组
    QVector<QByteArray> splitByteArray(const QByteArray &byteArray, int dataSize);
    QVector<float> splitByteArrayToData(const QByteArray &byteArray, int dataSize);

    float fps = 0.0f;

protected:
    QObject* worker_;
    QThread workerThread_;

private:
    typedef struct{
        bool isAnswer;
        bool isReport;
        QByteArray data;          //应答数据
        QByteArray rData;         //上报数据
    }answerType;

    QSerialPort *port;
    QByteArray buf;
    QVector<QByteArray> message;  //消息列表
    QMap<uint8_t, answerType> mFun;

    QTimer *fpsT;
    QTimer *revT;

    void packageToBus(uint8_t cmd, uint8_t fun, uint8_t *data, uint8_t dLen);
    uint8_t checkValCode(QByteArray ary, uint8_t start, uint8_t end);
    uint8_t crc8(QByteArray ary, uint8_t start, uint8_t end);

    bool isExist(uint8_t code);
    void process();
    int pkgNum = 0, lastPkgNum = 0;

private slots:
    void readyReadSlot();


signals:
    void report(uint8_t fun, QByteArray qb);

};



#endif // UPROTOCOL_H
